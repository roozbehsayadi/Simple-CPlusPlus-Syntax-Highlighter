/* The following code was generated by JFlex 1.6.1 */


import java.io.*;
import java_cup.runtime.*;

class Symbol {

	public String content;
	public TokenType tokenType;
	public int yyline, yycolumn;

	public Symbol( TokenType tokenType, int yyline, int yycolumn, String content ) {
		this.content = content;
		this.tokenType = tokenType;
		this.yyline = yyline;
		this.yycolumn = yycolumn;
	}

}

enum TokenType {

	AUTO, DOUBLE,
	INT, STRUCT,
	CONST, FLOAT,
	SHORT, UNSIGNED,
	BREAK, ELSE,
	LONG, SWITCH,
	CONTINUE, FOR,
	SIGNED, VOID,
	CASE, ENUM,
	REGISTER, TYPEDEF,
	DEFAULT, GOTO,
	SIZEOF, VOLATILE,
	CHAR, EXTERN,
	RETURN, UNION,
	DO, IF,
	STATIC, WHILE,
	LESSTHAN, MORETHAN,
	IDENTIFIER, INTEGER,
	ENTER, TAB,
	SPECIAL_CHARACTER, STRING,
	COMMENT, NORMAL_CHARACTER,
	NOTHING, EOF;

}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Scanner.flex</tt>
 */
public class MyScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\15\7\0\1\15\1\52\1\2\1\56\1\16\1\1\22\0\1\0"+
    "\1\0\1\53\4\0\1\21\2\0\1\4\4\0\1\3\1\10\7\11"+
    "\2\6\1\0\1\14\1\50\1\0\1\51\1\55\1\0\6\13\21\5"+
    "\1\12\2\5\1\0\1\54\2\0\1\7\1\0\1\20\1\26\1\35"+
    "\1\25\1\30\1\36\1\40\1\37\1\31\1\5\1\41\1\27\1\43"+
    "\1\32\1\24\1\45\1\5\1\34\1\33\1\23\1\22\1\17\1\42"+
    "\1\47\1\44\1\46\12\0\1\56\u1fa2\0\1\56\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\2\4\2\3\1\1"+
    "\15\3\1\5\1\6\1\7\1\10\1\11\1\12\1\11"+
    "\2\0\1\4\1\0\2\3\1\0\2\3\1\13\7\3"+
    "\1\14\14\3\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\2\31\2\0"+
    "\3\3\1\32\12\3\1\33\13\3\1\34\3\3\1\4"+
    "\1\3\1\35\1\36\6\3\1\37\1\40\1\41\11\3"+
    "\1\42\2\3\1\43\1\3\1\44\2\3\1\45\4\3"+
    "\1\46\5\3\1\47\4\3\1\50\1\51\1\52\3\3"+
    "\1\53\1\3\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\4\3\1\63\1\64\2\3\1\65\1\66\1\67"+
    "\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\136\0\215\0\136\0\274\0\353"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\136\0\136\0\136\0\136\0\136\0\136"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1"+
    "\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729"+
    "\0\u0758\0\u0787\0\353\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872"+
    "\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\136"+
    "\0\136\0\136\0\136\0\136\0\136\0\136\0\136\0\136"+
    "\0\136\0\136\0\136\0\u09ea\0\136\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\136\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\353\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\353\0\u0edf\0\u0f0e\0\u0f3d\0\136\0\u0f6c\0\353"+
    "\0\353\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\353"+
    "\0\353\0\353\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0"+
    "\0\u11cf\0\u11fe\0\u122d\0\353\0\u125c\0\u128b\0\353\0\u12ba"+
    "\0\353\0\u12e9\0\u1318\0\353\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\353\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\353\0\u14ee"+
    "\0\u151d\0\u154c\0\u157b\0\353\0\353\0\353\0\u15aa\0\u15d9"+
    "\0\u1608\0\353\0\u1637\0\353\0\353\0\353\0\353\0\353"+
    "\0\353\0\353\0\u1666\0\u1695\0\u16c4\0\u16f3\0\353\0\353"+
    "\0\u1722\0\u1751\0\353\0\353\0\353\0\353";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\4\1\10\1\11\1\4"+
    "\1\12\1\11\2\10\3\4\1\13\1\14\1\15\1\16"+
    "\1\17\1\10\1\20\1\21\1\22\1\23\1\24\1\10"+
    "\1\25\1\26\1\27\1\30\1\10\1\31\1\10\1\32"+
    "\5\10\1\33\1\34\1\35\1\36\3\4\1\37\2\0"+
    "\13\37\1\0\34\37\1\40\1\41\1\37\62\0\1\6"+
    "\57\0\1\42\1\43\57\0\7\10\3\0\2\10\1\0"+
    "\26\10\15\0\1\11\1\0\2\11\55\0\2\44\1\45"+
    "\34\0\1\45\14\0\7\10\3\0\2\10\1\0\2\10"+
    "\1\46\23\10\14\0\7\10\3\0\2\10\1\0\1\47"+
    "\25\10\7\0\1\50\2\0\12\50\4\0\31\50\1\0"+
    "\1\50\2\0\1\50\5\0\7\10\3\0\2\10\1\0"+
    "\10\10\1\51\15\10\14\0\7\10\3\0\2\10\1\0"+
    "\22\10\1\52\3\10\14\0\7\10\3\0\2\10\1\0"+
    "\2\10\1\53\3\10\1\54\17\10\14\0\7\10\3\0"+
    "\2\10\1\0\12\10\1\55\13\10\14\0\7\10\3\0"+
    "\2\10\1\0\2\10\1\56\23\10\14\0\7\10\3\0"+
    "\2\10\1\0\5\10\1\57\2\10\1\60\14\10\1\61"+
    "\14\0\7\10\3\0\2\10\1\0\10\10\1\62\3\10"+
    "\1\63\11\10\14\0\7\10\3\0\2\10\1\0\1\10"+
    "\1\64\5\10\1\65\5\10\1\66\2\10\1\67\5\10"+
    "\14\0\7\10\3\0\2\10\1\0\6\10\1\70\17\10"+
    "\14\0\7\10\3\0\1\10\1\71\1\0\2\10\1\72"+
    "\12\10\1\73\10\10\14\0\7\10\3\0\2\10\1\0"+
    "\2\10\1\74\2\10\1\75\20\10\14\0\7\10\3\0"+
    "\2\10\1\0\2\10\1\76\23\10\14\0\7\10\3\0"+
    "\2\10\1\0\15\10\1\77\10\10\17\0\1\100\6\0"+
    "\1\101\1\102\1\103\1\0\1\104\2\0\1\105\3\0"+
    "\1\106\1\0\1\107\1\0\1\110\14\0\1\111\1\112"+
    "\1\113\1\0\1\42\1\114\1\115\54\42\4\43\1\116"+
    "\52\43\10\0\2\44\53\0\1\117\1\0\2\117\1\0"+
    "\1\117\4\0\1\117\4\0\2\117\1\0\1\117\4\0"+
    "\2\117\25\0\7\10\3\0\2\10\1\0\5\10\1\120"+
    "\1\10\1\121\16\10\14\0\7\10\3\0\2\10\1\0"+
    "\1\10\1\122\24\10\30\0\1\123\42\0\7\10\3\0"+
    "\2\10\1\0\7\10\1\124\1\10\1\125\14\10\14\0"+
    "\7\10\3\0\2\10\1\0\23\10\1\126\2\10\14\0"+
    "\7\10\3\0\2\10\1\0\1\127\25\10\14\0\7\10"+
    "\3\0\2\10\1\0\14\10\1\130\11\10\14\0\7\10"+
    "\3\0\2\10\1\0\6\10\1\131\17\10\14\0\7\10"+
    "\3\0\2\10\1\0\10\10\1\132\15\10\14\0\7\10"+
    "\3\0\2\10\1\0\11\10\1\133\14\10\14\0\7\10"+
    "\3\0\2\10\1\0\1\134\25\10\14\0\7\10\3\0"+
    "\2\10\1\0\1\10\1\135\24\10\14\0\7\10\3\0"+
    "\2\10\1\0\1\10\1\136\24\10\14\0\7\10\3\0"+
    "\1\10\1\137\1\0\12\10\1\140\13\10\14\0\7\10"+
    "\3\0\2\10\1\0\16\10\1\141\5\10\1\142\1\10"+
    "\14\0\7\10\3\0\2\10\1\0\2\10\1\143\23\10"+
    "\14\0\7\10\3\0\2\10\1\0\7\10\1\144\16\10"+
    "\14\0\7\10\3\0\2\10\1\0\1\10\1\145\14\10"+
    "\1\146\7\10\14\0\7\10\3\0\2\10\1\0\11\10"+
    "\1\147\14\10\14\0\7\10\3\0\2\10\1\0\10\10"+
    "\1\150\15\10\14\0\7\10\3\0\1\10\1\151\1\0"+
    "\26\10\14\0\7\10\3\0\2\10\1\0\12\10\1\152"+
    "\13\10\14\0\7\10\3\0\2\10\1\0\2\10\1\153"+
    "\23\10\14\0\7\10\3\0\2\10\1\0\1\10\1\154"+
    "\24\10\14\0\7\10\3\0\2\10\1\0\7\10\1\155"+
    "\16\10\11\0\1\115\54\0\3\43\1\115\1\116\52\43"+
    "\6\0\1\117\1\0\2\117\1\0\1\117\1\156\3\0"+
    "\1\117\4\0\2\117\1\0\1\117\4\0\2\117\25\0"+
    "\7\10\3\0\1\10\1\157\1\0\26\10\14\0\7\10"+
    "\3\0\2\10\1\0\3\10\1\160\22\10\14\0\7\10"+
    "\3\0\2\10\1\0\2\10\1\161\23\10\14\0\7\10"+
    "\3\0\2\10\1\0\2\10\1\162\23\10\14\0\7\10"+
    "\3\0\2\10\1\0\7\10\1\163\16\10\14\0\7\10"+
    "\3\0\2\10\1\0\6\10\1\164\17\10\14\0\7\10"+
    "\3\0\2\10\1\0\4\10\1\165\21\10\14\0\7\10"+
    "\3\0\1\10\1\166\1\0\26\10\14\0\7\10\3\0"+
    "\1\10\1\167\1\0\26\10\14\0\7\10\3\0\2\10"+
    "\1\0\16\10\1\170\7\10\14\0\7\10\3\0\2\10"+
    "\1\0\6\10\1\171\17\10\14\0\7\10\3\0\2\10"+
    "\1\0\21\10\1\172\4\10\14\0\7\10\3\0\2\10"+
    "\1\0\6\10\1\173\17\10\14\0\7\10\3\0\2\10"+
    "\1\0\1\10\1\174\24\10\14\0\7\10\3\0\2\10"+
    "\1\0\1\175\25\10\14\0\7\10\3\0\2\10\1\0"+
    "\10\10\1\176\15\10\14\0\7\10\3\0\2\10\1\0"+
    "\6\10\1\177\17\10\14\0\7\10\3\0\2\10\1\0"+
    "\12\10\1\200\13\10\14\0\7\10\3\0\2\10\1\0"+
    "\1\10\1\201\24\10\14\0\7\10\3\0\2\10\1\0"+
    "\1\202\25\10\14\0\7\10\3\0\2\10\1\0\7\10"+
    "\1\203\16\10\14\0\7\10\3\0\2\10\1\0\6\10"+
    "\1\204\17\10\14\0\7\10\3\0\2\10\1\0\1\10"+
    "\1\205\7\10\1\206\14\10\14\0\7\10\3\0\2\10"+
    "\1\0\12\10\1\207\13\10\14\0\7\10\3\0\1\10"+
    "\1\210\1\0\26\10\14\0\7\10\3\0\2\10\1\0"+
    "\2\10\1\211\23\10\14\0\7\10\3\0\2\10\1\0"+
    "\5\10\1\212\20\10\14\0\7\10\3\0\2\10\1\0"+
    "\1\10\1\213\24\10\14\0\7\10\3\0\2\10\1\0"+
    "\10\10\1\214\15\10\14\0\7\10\3\0\2\10\1\0"+
    "\16\10\1\215\7\10\14\0\7\10\3\0\2\10\1\0"+
    "\3\10\1\216\22\10\14\0\7\10\3\0\2\10\1\0"+
    "\5\10\1\217\20\10\14\0\7\10\3\0\2\10\1\0"+
    "\1\220\25\10\14\0\7\10\3\0\2\10\1\0\17\10"+
    "\1\221\6\10\14\0\7\10\3\0\2\10\1\0\12\10"+
    "\1\222\13\10\14\0\7\10\3\0\2\10\1\0\7\10"+
    "\1\223\16\10\14\0\7\10\3\0\2\10\1\0\13\10"+
    "\1\224\12\10\14\0\7\10\3\0\2\10\1\0\6\10"+
    "\1\225\17\10\14\0\7\10\3\0\2\10\1\0\2\10"+
    "\1\226\23\10\14\0\7\10\3\0\2\10\1\0\1\10"+
    "\1\227\24\10\14\0\7\10\3\0\2\10\1\0\13\10"+
    "\1\230\12\10\14\0\7\10\3\0\2\10\1\0\12\10"+
    "\1\231\13\10\14\0\7\10\3\0\2\10\1\0\11\10"+
    "\1\232\14\10\14\0\7\10\3\0\2\10\1\0\7\10"+
    "\1\233\16\10\14\0\7\10\3\0\2\10\1\0\1\10"+
    "\1\234\24\10\14\0\7\10\3\0\2\10\1\0\1\10"+
    "\1\235\24\10\14\0\7\10\3\0\2\10\1\0\6\10"+
    "\1\236\17\10\14\0\7\10\3\0\2\10\1\0\7\10"+
    "\1\237\16\10\14\0\7\10\3\0\2\10\1\0\10\10"+
    "\1\240\15\10\14\0\7\10\3\0\2\10\1\0\6\10"+
    "\1\241\17\10\14\0\7\10\3\0\2\10\1\0\6\10"+
    "\1\242\17\10\14\0\7\10\3\0\2\10\1\0\5\10"+
    "\1\243\20\10\14\0\7\10\3\0\2\10\1\0\10\10"+
    "\1\244\15\10\14\0\7\10\3\0\2\10\1\0\13\10"+
    "\1\245\12\10\14\0\7\10\3\0\2\10\1\0\1\10"+
    "\1\246\24\10\14\0\7\10\3\0\2\10\1\0\3\10"+
    "\1\247\22\10\14\0\7\10\3\0\2\10\1\0\14\10"+
    "\1\250\11\10\14\0\7\10\3\0\2\10\1\0\15\10"+
    "\1\251\10\10\14\0\7\10\3\0\2\10\1\0\10\10"+
    "\1\252\15\10\14\0\7\10\3\0\2\10\1\0\1\10"+
    "\1\253\24\10\14\0\7\10\3\0\2\10\1\0\10\10"+
    "\1\254\15\10\14\0\7\10\3\0\2\10\1\0\5\10"+
    "\1\255\20\10\14\0\7\10\3\0\2\10\1\0\6\10"+
    "\1\256\17\10\14\0\7\10\3\0\2\10\1\0\14\10"+
    "\1\257\11\10\14\0\7\10\3\0\2\10\1\0\1\10"+
    "\1\260\24\10\14\0\7\10\3\0\2\10\1\0\6\10"+
    "\1\261\17\10\14\0\7\10\3\0\2\10\1\0\1\262"+
    "\25\10\14\0\7\10\3\0\2\10\1\0\6\10\1\263"+
    "\17\10\14\0\7\10\3\0\2\10\1\0\3\10\1\264"+
    "\22\10\14\0\7\10\3\0\2\10\1\0\12\10\1\265"+
    "\13\10\14\0\7\10\3\0\2\10\1\0\6\10\1\266"+
    "\17\10\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\11\1\1\1\11\24\1\6\11\1\1"+
    "\2\0\1\1\1\0\2\1\1\0\27\1\14\11\1\1"+
    "\1\11\2\0\3\1\1\11\32\1\1\11\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Symbol( TokenType.EOF, yyline, yycolumn, "EOF" );
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol( TokenType.NOTHING, yyline, yycolumn, yytext() );
            }
          case 57: break;
          case 2: 
            { return new Symbol( TokenType.ENTER, yyline, yycolumn, "\n" );
            }
          case 58: break;
          case 3: 
            { return new Symbol( TokenType.IDENTIFIER, yyline, yycolumn, yytext() );
            }
          case 59: break;
          case 4: 
            { return new Symbol( TokenType.INTEGER, yyline, yycolumn, yytext() );
            }
          case 60: break;
          case 5: 
            { return new Symbol( TokenType.LESSTHAN, yyline, yycolumn, "lessthan" );
            }
          case 61: break;
          case 6: 
            { return new Symbol( TokenType.MORETHAN, yyline, yycolumn, "morethan" );
            }
          case 62: break;
          case 7: 
            { return new Symbol( TokenType.TAB, yyline, yycolumn, "\t" );
            }
          case 63: break;
          case 8: 
            { yybegin( STRING ); return new Symbol( TokenType.STRING, yyline, yycolumn, yytext() );
            }
          case 64: break;
          case 9: 
            { return new Symbol( TokenType.STRING, yyline, yycolumn, yytext() );
            }
          case 65: break;
          case 10: 
            { yybegin( YYINITIAL ); return new Symbol( TokenType.STRING, yyline, yycolumn, yytext() );
            }
          case 66: break;
          case 11: 
            { return new Symbol( TokenType.DO, yyline, yycolumn, "do" );
            }
          case 67: break;
          case 12: 
            { return new Symbol( TokenType.IF, yyline, yycolumn, "if" );
            }
          case 68: break;
          case 13: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\0" );
            }
          case 69: break;
          case 14: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\v" );
            }
          case 70: break;
          case 15: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\a" );
            }
          case 71: break;
          case 16: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\'" );
            }
          case 72: break;
          case 17: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\t" );
            }
          case 73: break;
          case 18: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\b" );
            }
          case 74: break;
          case 19: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\n" );
            }
          case 75: break;
          case 20: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\r" );
            }
          case 76: break;
          case 21: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\f" );
            }
          case 77: break;
          case 22: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\\"" );
            }
          case 78: break;
          case 23: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\\\" );
            }
          case 79: break;
          case 24: 
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\?" );
            }
          case 80: break;
          case 25: 
            { return new Symbol( TokenType.COMMENT, yyline, yycolumn, yytext() );
            }
          case 81: break;
          case 26: 
            { return new Symbol( TokenType.NORMAL_CHARACTER, yyline, yycolumn, yytext() );
            }
          case 82: break;
          case 27: 
            { return new Symbol( TokenType.INT, yyline, yycolumn, "int" );
            }
          case 83: break;
          case 28: 
            { return new Symbol( TokenType.FOR, yyline, yycolumn, "for" );
            }
          case 84: break;
          case 29: 
            { return new Symbol( TokenType.VOID, yyline, yycolumn, "void" );
            }
          case 85: break;
          case 30: 
            { return new Symbol( TokenType.AUTO, yyline, yycolumn, "auto" );
            }
          case 86: break;
          case 31: 
            { return new Symbol( TokenType.LONG, yyline, yycolumn, "long" );
            }
          case 87: break;
          case 32: 
            { return new Symbol( TokenType.ELSE, yyline, yycolumn, "else" );
            }
          case 88: break;
          case 33: 
            { return new Symbol( TokenType.ENUM, yyline, yycolumn, "enum" );
            }
          case 89: break;
          case 34: 
            { return new Symbol( TokenType.CASE, yyline, yycolumn, "case" );
            }
          case 90: break;
          case 35: 
            { return new Symbol( TokenType.CHAR, yyline, yycolumn, "char" );
            }
          case 91: break;
          case 36: 
            { return new Symbol( TokenType.GOTO, yyline, yycolumn, "goto" );
            }
          case 92: break;
          case 37: 
            { return new Symbol( TokenType.UNION, yyline, yycolumn, "union" );
            }
          case 93: break;
          case 38: 
            { return new Symbol( TokenType.BREAK, yyline, yycolumn, "break" );
            }
          case 94: break;
          case 39: 
            { return new Symbol( TokenType.SHORT, yyline, yycolumn, "short" );
            }
          case 95: break;
          case 40: 
            { return new Symbol( TokenType.CONST, yyline, yycolumn, "const" );
            }
          case 96: break;
          case 41: 
            { return new Symbol( TokenType.FLOAT, yyline, yycolumn, "float" );
            }
          case 97: break;
          case 42: 
            { return new Symbol( TokenType.WHILE, yyline, yycolumn, "while" );
            }
          case 98: break;
          case 43: 
            { return new Symbol( TokenType.DOUBLE, yyline, yycolumn, "double" );
            }
          case 99: break;
          case 44: 
            { return new Symbol( TokenType.EXTERN, yyline, yycolumn, "extern" );
            }
          case 100: break;
          case 45: 
            { return new Symbol( TokenType.STATIC, yyline, yycolumn, "static" );
            }
          case 101: break;
          case 46: 
            { return new Symbol( TokenType.STRUCT, yyline, yycolumn, "struct" );
            }
          case 102: break;
          case 47: 
            { return new Symbol( TokenType.SIGNED, yyline, yycolumn, "signed" );
            }
          case 103: break;
          case 48: 
            { return new Symbol( TokenType.SIZEOF, yyline, yycolumn, "sizeof" );
            }
          case 104: break;
          case 49: 
            { return new Symbol( TokenType.SWITCH, yyline, yycolumn, "switch" );
            }
          case 105: break;
          case 50: 
            { return new Symbol( TokenType.RETURN, yyline, yycolumn, "return" );
            }
          case 106: break;
          case 51: 
            { return new Symbol( TokenType.TYPEDEF, yyline, yycolumn, "typedef" );
            }
          case 107: break;
          case 52: 
            { return new Symbol( TokenType.DEFAULT, yyline, yycolumn, "default" );
            }
          case 108: break;
          case 53: 
            { return new Symbol( TokenType.VOLATILE, yyline, yycolumn, "volatile" );
            }
          case 109: break;
          case 54: 
            { return new Symbol( TokenType.UNSIGNED, yyline, yycolumn, "unsigned" );
            }
          case 110: break;
          case 55: 
            { return new Symbol( TokenType.REGISTER, yyline, yycolumn, "register" );
            }
          case 111: break;
          case 56: 
            { return new Symbol( TokenType.CONTINUE, yyline, yycolumn, "continue" );
            }
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
